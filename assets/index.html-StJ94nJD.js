import{_ as i,c as l,a as o,o as t}from"./app-BRZjaKcj.js";const a={};function c(n,e){return t(),l("div",null,e[0]||(e[0]=[o('<div class="hint-container note"><p class="hint-container-title">注</p><p>Vue 3：<a href="https://cn.vuejs.org/style-guide" target="_blank" rel="noopener noreferrer">https://cn.vuejs.org/style-guide</a></p><p>Vue 2：<a href="https://v2.cn.vuejs.org/v2/style-guide" target="_blank" rel="noopener noreferrer">https://v2.cn.vuejs.org/v2/style-guide</a></p><p>其他：<a href="https://vue3-element-admin-site.midfar.com/zh/guide/advanced/style-guide" target="_blank" rel="noopener noreferrer">https://vue3-element-admin-site.midfar.com/zh/guide/advanced/style-guide</a></p></div><h2 id="_01-几个比较重要的" tabindex="-1"><a class="header-anchor" href="#_01-几个比较重要的"><span>01 几个比较重要的</span></a></h2><ul><li>组件的组件名尽量为<strong>多个单词</strong></li><li>对于<strong>文件夹和文件</strong>的命名 <ul><li>路由组件：<code>kebab-case</code> ，如 <code>views/export-excel.vue</code></li><li>非路由组件：<code>PascalCase</code> ，如 <code>components/HeaderSearch.vue</code></li><li>所有的 JS/TS 文件都使用 <code>kebab-case</code> ，如 <code>remote-search.js</code></li></ul></li><li><code>import</code> 引入组件时，使用大驼峰命名 <code>import ExportExcel form ‘@/views/export-excel.vue</code></li><li>在模板中使用组件时，统一使用短横线链接，尽量与 UI 组件统一，同时避免在 JSX 中不支持大驼峰写法的问题（Vue 官方推荐：在单文件组件中，推荐为子组件使用  <code>PascalCase</code>  的标签名，以此来和原生的 HTML 元素作区分），这两种均可，视情况而定</li><li>在子组件的标签体中传递 props 时和绑定自定义事件时使用 <code>kebab-case</code>，如 <code>:class-name=&quot;app-container&quot;</code></li><li>组件中声明接收 props 时使用 <code>camelCase</code>，如 <code>className</code></li><li>在单文件组件、字符串模板和  JSX  中没有内容的组件应该是自闭合的——但在 JSX 里永远不要这样做</li><li>指令缩写 (用  <code>:</code>  表示  <code>v-bind:</code>、用  <code>@</code>  表示  <code>v-on:</code>  和用  <code>#</code>  表示  <code>v-slot:</code>) 应该要么都用要么都不用</li></ul><h2 id="_02-选项式组件中选项的顺序" tabindex="-1"><a class="header-anchor" href="#_02-选项式组件中选项的顺序"><span>02 选项式组件中选项的顺序</span></a></h2><ol><li>name</li><li>components</li><li>directives</li><li>filters</li><li>mixins</li><li>provide inject</li><li>props</li><li>emits</li><li>setup</li><li>data</li><li>computed</li><li>watch</li><li>生命周期钩子</li><li>methods</li></ol><h2 id="_03-元素属性的顺序" tabindex="-1"><a class="header-anchor" href="#_03-元素属性的顺序"><span>03 元素属性的顺序</span></a></h2><ol><li>is</li><li>v-for</li><li>v-if v-else v-show</li><li>id</li><li>ref key</li><li>v-slot #</li><li>v-model</li><li>v-自定义指令</li><li>v-bind class style 等其他自定义属性和原生属性 <ol><li>style</li><li>class</li></ol></li><li>v-on @</li><li>v-text v-html</li></ol><p><code>plugin:vue/recommended</code> 规则中涵盖了 <code>vue/attributes-order</code> 规则</p>',8)]))}const r=i(a,[["render",c]]),d=JSON.parse('{"path":"/engineering/pt2dunwu/","title":"Vue 风格指南","lang":"zh-CN","frontmatter":{"title":"Vue 风格指南","createTime":"2024/12/21 21:04:17","permalink":"/engineering/pt2dunwu/"},"git":{"updatedTime":1740753621000,"contributors":[{"name":"evanqhu","username":"evanqhu","email":"qianghu98@163.com","commits":2,"avatar":"https://avatars.githubusercontent.com/evanqhu?v=4","url":"https://github.com/evanqhu"}]},"filePathRelative":"notes/engineering/01.代码规范/vue-style-guide.md","headers":[]}');export{r as comp,d as data};
