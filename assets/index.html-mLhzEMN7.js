import{_ as s,c as i,a,o as t}from"./app-BRZjaKcj.js";const h={};function d(n,e){return t(),i("div",null,e[0]||(e[0]=[a(`<p>在 Vue 中，响应式系统是其核心特性之一。但在 Vue 2 和 Vue 3 中，它们的底层实现完全不同，特别是在<strong>给组件中定义的变量赋值一个大对象时的性能表现差异非常明显</strong>。下面我们来详细分析这一点。</p><hr><h3 id="🧠-vue-2-响应式系统基于-object-defineproperty" tabindex="-1"><a class="header-anchor" href="#🧠-vue-2-响应式系统基于-object-defineproperty"><span>🧠 Vue 2：响应式系统基于 <code>Object.defineProperty</code></span></a></h3><ul><li>Vue 2 使用 <code>Object.defineProperty</code> 将对象的属性变成响应式。</li><li>在赋值一个对象时，Vue 会<strong>递归遍历这个对象的每一个属性</strong>，为每个属性添加 <code>getter</code> 和 <code>setter</code>。</li><li>如果赋值的是一个嵌套层级深、数据量大的对象，性能开销非常大。</li></ul><h4 id="⚠️-性能问题" tabindex="-1"><a class="header-anchor" href="#⚠️-性能问题"><span>⚠️ 性能问题：</span></a></h4><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> largeData</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 会触发递归式响应式转换，慢</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="✅-优化方法" tabindex="-1"><a class="header-anchor" href="#✅-优化方法"><span>✅ 优化方法：</span></a></h4><p>使用 <code>Object.freeze()</code> 冻结对象，Vue 2 会自动跳过响应式处理：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">freeze</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">largeData</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 不会递归转换，性能大幅提升</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p><code>Object.freeze()</code> 让对象变为不可变，Vue 检测到这个标志后会跳过响应式处理。</p></blockquote><hr><h3 id="⚙️-vue-3-响应式系统基于-proxy" tabindex="-1"><a class="header-anchor" href="#⚙️-vue-3-响应式系统基于-proxy"><span>⚙️ Vue 3：响应式系统基于 <code>Proxy</code></span></a></h3><ul><li>Vue 3 使用 <code>Proxy</code> 重写了响应式系统。</li><li>代理是<strong>懒执行</strong>的：只有在访问属性时，才会对子属性进行代理。</li><li>赋值大对象时，并不会立刻递归整个结构，因此性能更好。</li></ul><h4 id="✅-性能更优" tabindex="-1"><a class="header-anchor" href="#✅-性能更优"><span>✅ 性能更优：</span></a></h4><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> reactive</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> largeData</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 只代理 info，内部属性直到访问才会处理</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>由于 Vue 3 是惰性代理，所以不需要像 Vue 2 那样手动使用 <code>Object.freeze()</code> 来优化性能。</p></blockquote><hr><h3 id="📌-对比总结" tabindex="-1"><a class="header-anchor" href="#📌-对比总结"><span>📌 对比总结</span></a></h3><table><thead><tr><th>特性</th><th>Vue 2</th><th>Vue 3</th></tr></thead><tbody><tr><td>响应式实现方式</td><td><code>Object.defineProperty</code></td><td><code>Proxy</code></td></tr><tr><td>是否递归处理对象属性</td><td>是</td><td>否，懒处理</td></tr><tr><td>大对象赋值性能</td><td>较差</td><td>优秀</td></tr><tr><td>是否需要使用 <code>Object.freeze</code> 优化</td><td>是</td><td>否</td></tr><tr><td>响应式转换触发时机</td><td>赋值时立即递归</td><td>访问时再代理</td></tr></tbody></table><hr><h3 id="✅-最佳实践建议" tabindex="-1"><a class="header-anchor" href="#✅-最佳实践建议"><span>✅ 最佳实践建议</span></a></h3><ul><li>在 <strong>Vue 2</strong> 中，如果你赋值的是不需要响应的<strong>大对象（如后端传来的原始数据）</strong>，请使用 <code>Object.freeze()</code>。</li><li>在 <strong>Vue 3</strong> 中，你<strong>不需要做任何处理</strong>，性能已经足够优秀。</li></ul>`,22)]))}const l=s(h,[["render",d]]),k=JSON.parse('{"path":"/vue/fydl77l7/","title":"冻结对象","lang":"zh-CN","frontmatter":{"title":"冻结对象","createTime":"2025/04/10 16:21:22","permalink":"/vue/fydl77l7/"},"git":{"updatedTime":1744294364000,"contributors":[{"name":"evanqhu","username":"evanqhu","email":"qianghu98@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/evanqhu?v=4","url":"https://github.com/evanqhu"}]},"filePathRelative":"notes/vue/freeze-object.md","headers":[]}');export{l as comp,k as data};
