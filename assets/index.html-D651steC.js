import{_ as s,c as a,a as e,o as l}from"./app-BRZjaKcj.js";const n={};function t(d,i){return l(),a("div",null,i[0]||(i[0]=[e(`<p>缓存策略：根据资源响应头中的 <code>Cache-Control</code> 字段使用强缓存，如果没有强缓存或缓存失败，则尝试使用协商缓存，优先使用 <code>ETag</code> 协商，其次使用 <code>Last-Modified</code> 协商</p><p>缓存策略只在 get 请求范围内讨论</p><h2 id="_1️⃣-强缓存" tabindex="-1"><a class="header-anchor" href="#_1️⃣-强缓存"><span>1️⃣ 强缓存</span></a></h2><ul><li>浏览器直接从缓存中读取资源，不与服务器通信</li><li>它基于 <strong>HTTP 响应头</strong>中的 <code>Cache-Control</code> 字段 <ul><li><code>Cache-Control</code>：更灵活的缓存控制，通过多个指令 (如 max-age、no-cache、no-store 等) 来控制缓存行为</li><li><code>Expires</code>：一个表示资源的到期时间。在此时间之前，浏览器会直接使用缓存，不请求服务器 (已淘汰)</li></ul></li><li>状态码为 <code>200 OK (from disk cache)</code></li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 不使用强缓存</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Cache</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Control</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> no</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">cache</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 相当于 max-age=0，资源在浏览器有备份，但是不直接使用，允许协商缓存使用</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 强缓存，十分钟内请求该资源，直接使用浏览器的缓存</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Cache</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Control</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> max</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">600</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 指定缓存有效期，单位是秒</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Date</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">当前时间</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Expires: </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">max-age</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> 后的时间</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2️⃣-协商缓存" tabindex="-1"><a class="header-anchor" href="#_2️⃣-协商缓存"><span>2️⃣ 协商缓存</span></a></h2><ul><li>基于响应头中的 <code>Last-Modified</code> 或 <code>ETag</code> 字段进行判断</li><li>当强缓存过期后</li><li>浏览器会向服务器发送请求，询问资源是否修改过 <ul><li>浏览器检查<strong>响应头</strong>中的 <code>Last-modified/ETag</code> 字段</li><li>浏览器在<strong>请求头</strong>中携带 <code>If-Modified-Since/If-Not-Match</code> 字段，值就是 <code>Last-modified/ETag</code> 的值</li><li><code>Last-modified</code> 字段记录当前资源上一次的修改时间；<code>ETag</code> 字段记录当前资源的哈希值</li><li><code>Last-modified</code> 对应 <code>If-Modified-Since</code>；<code>ETag</code> 对应 <code>If-Not-Match</code></li></ul></li><li>服务器比较该资源最新修改时间，如果资源没有变动，则不返回资源，响应 <code>304 (Not Modified)</code></li><li>浏览器重新启用强缓存，并更新有效期</li></ul><p><code>Last-Modified</code> 指的是文件的最后修改时间</p><p><code>ETag</code> 是文件的唯一标识符，只要文件内容不变，这个标识符就不会变</p><blockquote><p><code>ETag</code> 比 <code>Last-Modified</code> 好的原因：</p><ul><li><code>Last-Modified</code> 是文件的最后修改时间，如果文件内容没有变，修改时间变了，服务器仍会认为资源已更改</li><li><code>Last-Modified</code> 的时间戳只能精确到秒</li><li>只要资源内容不变，<code>ETag</code> 值就不变</li></ul></blockquote>`,10)]))}const o=s(n,[["render",t]]),c=JSON.parse('{"path":"/others/xqmqu9al/","title":"浏览器缓存","lang":"zh-CN","frontmatter":{"title":"浏览器缓存","createTime":"2024/12/23 11:37:02","permalink":"/others/xqmqu9al/"},"git":{"updatedTime":1734930877000,"contributors":[{"name":"evanqhu","username":"evanqhu","email":"qianghu98@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/evanqhu?v=4","url":"https://github.com/evanqhu"}]},"filePathRelative":"notes/others/browser-cache.md","headers":[]}');export{o as comp,c as data};
