import{_ as a,c as o,a as c,o as n}from"./app-BRZjaKcj.js";const d="/assets/flex-DT7Cgb-K.png",s="/assets/souvlaki-labeled-2ClO8xvS.webp",i="/assets/bunched-wieners-fixed-outline-Dnn9-Vb8.webp",t={};function l(r,e){return n(),o("div",null,e[0]||(e[0]=[c('<div class="hint-container note"><p class="hint-container-title">注</p><p>语法：<a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener noreferrer">https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p><p>实战：<a href="https://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener noreferrer">https://www.ruanyifeng.com/blog/2015/07/flex-examples.html</a></p><p><a href="https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/" target="_blank" rel="noopener noreferrer">https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/</a></p></div><p>Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为 Flex 布局。</p><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称&quot;容器&quot;。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称&quot;项目&quot;。</p><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 <code>main start</code>，结束位置叫做 <code>main end</code>；交叉轴的开始位置叫做 <code>cross start</code>，结束位置叫做 <code>cross end</code>。</p><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做 <code>main size</code>，占据的交叉轴空间叫做 <code>cross size</code>。</p><img src="'+d+'" class="my-img"><h2 id="容器属性-6" tabindex="-1"><a class="header-anchor" href="#容器属性-6"><span>容器属性 (6)</span></a></h2><h3 id="_1️⃣-flex-direction" tabindex="-1"><a class="header-anchor" href="#_1️⃣-flex-direction"><span>1️⃣ <code>flex-direction</code></span></a></h3><p>该属性决定主轴的方向（即项目的排列方向）。</p><ul><li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li><li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li><li><code>column</code>：主轴为垂直方向，起点在上沿。</li><li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li></ul><h3 id="_2️⃣-flex-wrap" tabindex="-1"><a class="header-anchor" href="#_2️⃣-flex-wrap"><span>2️⃣ <code>flex-wrap</code></span></a></h3><p>该属性决定如何换行，默认在一条轴线上排列不换行。</p><ul><li><code>nowrap</code>（默认值）：不换行。</li><li><code>wrap</code>：换行，第一行在上方。</li><li><code>wrap-reverse</code>：换行，第一行在下方。</li></ul><h3 id="_3️⃣-flex-flow" tabindex="-1"><a class="header-anchor" href="#_3️⃣-flex-flow"><span>3️⃣ <code>flex-flow</code></span></a></h3><p>该属性是 <code>flex-direction</code> 属性和 <code>flex-wrap</code> 属性的简写形式，默认值为 <code>row nowrap</code>。</p><h3 id="_4️⃣-justify-content" tabindex="-1"><a class="header-anchor" href="#_4️⃣-justify-content"><span>4️⃣ <code>justify-content</code></span></a></h3><p>该属性定义了项目在<strong>主轴</strong>上的对齐方式。</p><ul><li><code>flex-start</code>（默认值）：左对齐</li><li><code>flex-end</code>：右对齐</li><li><code>center</code>：居中</li><li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li><li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li><li><code>space-evenly</code>：项目与项目之间的间隔相等，项目与边框的间隔也相等。</li></ul><h3 id="_5️⃣-align-items" tabindex="-1"><a class="header-anchor" href="#_5️⃣-align-items"><span>5️⃣ <code>align-items</code></span></a></h3><p>该属性定义项目在<strong>交叉轴</strong>上的对齐方式。<strong>(一根轴线)</strong></p><ul><li><code>flex-start</code>：交叉轴的起点对齐。</li><li><code>flex-end</code>：交叉轴的终点对齐。</li><li><code>center</code>：交叉轴的中点对齐。</li><li><code>baseline</code>: 项目的第一行文字的基线对齐。</li><li><code>stretch</code>：如果项目未设置高度或设为 auto，将占满整个容器的高度（默认值）。</li></ul><h3 id="_6️⃣-align-content" tabindex="-1"><a class="header-anchor" href="#_6️⃣-align-content"><span>6️⃣ <code>align-content</code></span></a></h3><p>该属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。<strong>(多根轴线)</strong></p><ul><li><code>flex-start</code>：与交叉轴的起点对齐。</li><li><code>flex-end</code>：与交叉轴的终点对齐。</li><li><code>center</code>：与交叉轴的中点对齐。</li><li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li><code>stretch</code>：轴线占满整个交叉轴（默认值）。</li></ul><h2 id="项目属性-6" tabindex="-1"><a class="header-anchor" href="#项目属性-6"><span>项目属性 (6)</span></a></h2><h3 id="_1️⃣-order" tabindex="-1"><a class="header-anchor" href="#_1️⃣-order"><span>1️⃣ <code>order</code></span></a></h3><p>定义项目的排列顺序。数值越小，排列越靠前，默认为 0。</p><h3 id="_2️⃣-flex-grow" tabindex="-1"><a class="header-anchor" href="#_2️⃣-flex-grow"><span>2️⃣ <code>flex-grow</code></span></a></h3><p>定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。</p><h3 id="_3️⃣-flex-shrink" tabindex="-1"><a class="header-anchor" href="#_3️⃣-flex-shrink"><span>3️⃣ <code>flex-shrink</code></span></a></h3><p>定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>对于一些元素，比如 <code>svg</code> 等，我们需要防止它收缩，可以将 <code>flex-shrink</code> 设置为 0。</p></div><h3 id="_4️⃣-flex-basis" tabindex="-1"><a class="header-anchor" href="#_4️⃣-flex-basis"><span>4️⃣ <code>flex-basis</code></span></a></h3><p>定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 <code>auto</code>，即项目的本来大小。</p><h3 id="_5️⃣-flex" tabindex="-1"><a class="header-anchor" href="#_5️⃣-flex"><span>5️⃣ <code>flex</code></span></a></h3><p>该属性是 <code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code> 的简写，默认值为 <code>0 1 auto</code>。后两个属性可选。</p><p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 <code>none</code> (<code>0 0 auto</code>)。</p><p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><h3 id="_6️⃣-align-self" tabindex="-1"><a class="header-anchor" href="#_6️⃣-align-self"><span>6️⃣ <code>align-self</code></span></a></h3><p>该属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 <code>align-items</code> 属性。默认值为 <code>auto</code>，表示继承父元素的 <code>align-items</code> 属性，如果没有父元素，则等同于 <code>stretch</code>。</p><p>该属性可能取 6 个值，除了 <code>auto</code>，其他都与 <code>align-items</code> 属性完全一致。</p><h2 id="进阶用法" tabindex="-1"><a class="header-anchor" href="#进阶用法"><span>进阶用法</span></a></h2><h3 id="css-的布局模式" tabindex="-1"><a class="header-anchor" href="#css-的布局模式"><span>CSS 的布局模式</span></a></h3><p>CSS 可以分为几种布局模式，默认的是“流式布局” (Flow Layout)，即按照文档的顺序，从上到下，从左到右，按照顺序一个一个放置元素。</p><p>可以通过更改元素的 <code>display</code> 属性来改变布局模式，当该属性值设为 <code>flex</code> 时，我们就创造了一个 Flex 格式化上下文，该元素的子元素就会变成 Flex 布局模式。</p><h3 id="justify-content-和-align-items-的区别" tabindex="-1"><a class="header-anchor" href="#justify-content-和-align-items-的区别"><span><code>justify-content</code> 和 <code>align-items</code> 的区别</span></a></h3><ul><li><p>我们可以将沿着<strong>主轴</strong>排列的元素想象成<strong>一串烤肉串</strong>，<strong>交叉轴</strong>上的每个元素相当于一个<strong>维也纳香肠</strong>。</p></li><li><p>因此，在讨论主轴对齐时，我们只能考虑如何分配组，使用的是 <code>justify-content</code>；而在讨论交叉轴对齐时，我们可以决定每个元素的位置，使用的是 <code>align-items</code>。</p></li><li><p><code>align-items</code> 可以理解为统一设置每个子元素的 <code>align-self</code> 属性。</p></li></ul><h4 id="主轴" tabindex="-1"><a class="header-anchor" href="#主轴"><span>主轴</span></a></h4><img src="'+s+'" class="my-img zoom-40"><h4 id="交叉轴" tabindex="-1"><a class="header-anchor" href="#交叉轴"><span>交叉轴</span></a></h4><img src="'+i+'" class="my-img zoom-40"><h3 id="假设尺寸" tabindex="-1"><a class="header-anchor" href="#假设尺寸"><span>假设尺寸</span></a></h3><p>在 Flex 布局中，当设置元素的 <code>width</code> 属性时，可以理解为设置的是元素的<strong>假设尺寸</strong>，而元素的实际尺寸可能并不是我们设置的值。只有当 Flex 容器的大小足够时，元素才会按照假设尺寸来显示。</p><h3 id="flex-basis" tabindex="-1"><a class="header-anchor" href="#flex-basis"><span><code>flex-basis</code></span></a></h3><p>该属性设置的是元素占据的主轴空间，或者说是元素在主轴方向上的假设尺寸。在 Flex Row 布局时，它的作用与 <code>width</code> 相同，而在 Flex Column 布局时，它的作用与 <code>height</code> 相同。</p><h3 id="最小尺寸" tabindex="-1"><a class="header-anchor" href="#最小尺寸"><span>最小尺寸</span></a></h3><p>Flex 容器在缩小到某一点时也可能出现内容溢出，尽管设置了默认的 <code>flex-shrink</code> 属性。</p><p>因为 Flex 布局的算法拒绝缩小子元素到它的<strong>最小尺寸</strong>以下，当 Flex 容器宽度小于子元素的最小尺寸时，子元素会溢出。</p><p>文本输入元素的最小尺寸一般在 <code>170px-200px</code>，不同浏览器之间略有不同；一段文本的最小尺寸是它的最长的单词的宽度。</p><p>使用 <code>min-width</code> 可以重新定义最小尺寸</p><h3 id="auto-margins" tabindex="-1"><a class="header-anchor" href="#auto-margins"><span>Auto margins</span></a></h3><p><code>margin</code> 属性用于在特定元素周围添加空间。当设置 <code>margin</code> 属性值为 <code>auto</code> 时可以有很多妙用，比如实现导航栏左边一个元素，右边两个元素的布局，只需要对左边一个元素设置 <code>margin-right: auto</code> 即可。</p><p>Auto margins 将吞噬额外的空间，并将其应用于元素的边距。它使我们可以精确控制在何处分配额外的空间。</p>',64)]))}const p=a(t,[["render",l]]),f=JSON.parse('{"path":"/others/a0iptk39/","title":"Flex 布局","lang":"zh-CN","frontmatter":{"title":"Flex 布局","createTime":"2025/01/06 15:59:03","permalink":"/others/a0iptk39/"},"git":{"updatedTime":1738736976000,"contributors":[{"name":"evanqhu","username":"evanqhu","email":"qianghu98@163.com","commits":2,"avatar":"https://avatars.githubusercontent.com/evanqhu?v=4","url":"https://github.com/evanqhu"}]},"filePathRelative":"notes/others/flex.md","headers":[]}');export{p as comp,f as data};
