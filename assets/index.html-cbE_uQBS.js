import{_ as s,c as a,a as e,o as n}from"./app-BRZjaKcj.js";const h={};function l(k,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h2 id="接口跨域问题" tabindex="-1"><a class="header-anchor" href="#接口跨域问题"><span>接口跨域问题</span></a></h2><h3 id="问题-1️⃣" tabindex="-1"><a class="header-anchor" href="#问题-1️⃣"><span>问题 1️⃣</span></a></h3><p>前端域名：<code>example.com</code></p><p>接口域名：<code>api.example.com</code></p><ol><li>权限相关接口，需要在 Headers 中携带 <code>cookie</code> 进行鉴权</li><li>由于前后端不同源，请求时需设置：<code>withCredentials: true</code> 或 <code>credentials: include</code>，这样才能把 <code>cookie</code> 带过去</li><li>后端设置 <code>Access-Control-Allow-Origin: &#39;*&#39;</code>。Credential 不支持这种设置，必须是具体的域名，导致 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Guides/CORS/Errors/CORSNotSupportingCredentials" target="_blank" rel="noopener noreferrer">CORS 错误</a></li><li>如果保持后端 <code>Access-Control-Allow-Origin: &#39;*&#39;</code> 不变，则无法使用 Credential，<code>cookie</code> 无法被携带到后端，无法鉴权</li></ol><h3 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h3><p>1️⃣ 服务端代理</p><p>前端对所有接口请求都通过 Node 服务器进行一次转发</p><p>如：在 Nuxt 中，可以对所有环境都通过 Nitro 服务器作为代理发送请求</p><p>2️⃣ 使用 Nginx</p><p>使用 Nginx 转发请求</p><p>3️⃣ 后端使用 JWT (推荐)</p><p>后端不使用 Headers 中的 cookie 来鉴权，而是使用自定义的 Headers 头，如 Authorization：</p><p><code>Authorization: Bearer &lt;token&gt;</code></p><h3 id="问题-2️⃣" tabindex="-1"><a class="header-anchor" href="#问题-2️⃣"><span>问题 2️⃣</span></a></h3><p>前端域名 1：<code>example.com</code> 前端域名 2：<code>sample.com</code></p><p>接口域名：<code>api.example.com</code></p><ol><li>后端设置了 <code>Access-Control-Allow-Origin: &#39;具体域名&#39;</code></li><li>前端使用 <code>withCredentials: true</code> 或 <code>credentials: include</code></li><li>但是接口却拿不到 token</li></ol><h3 id="原因分析" tabindex="-1"><a class="header-anchor" href="#原因分析"><span>原因分析</span></a></h3><p>前端调用 <code>api.example.com/login</code> 登录接口，该接口返回一个 set-cookie，该 cookie 只能被 <code>api.example.com</code> 访问，其他域名无法访问</p><p><code>Set-Cookie: satoken=xxxx; Max-Age=86400; Path=/</code></p><p>对于域名 1 来说，该 cookie 可以正常种下，之后请求也能正常携带；但是对于 域名 2 来说，由于域名 2 和后端接口不<strong>同站</strong>，所以该 cookie 无法被种下，之后也无法携带到后端</p><h3 id="解决方案-1" tabindex="-1"><a class="header-anchor" href="#解决方案-1"><span>解决方案</span></a></h3><p>使用自定义 Header 携带 Token，但仍需要使用 Cookie 作为中介</p><ol><li>调用登录接口时，接口会返回 <code>tokenName</code> 和 <code>tokenValue</code>，使用 <code>useCookie()</code> 将 <code>tokenName</code> 和 <code>tokenValue</code> 存到 <code>cookie</code> 中</li></ol><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">login</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> async </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: { </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ggToken</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> })</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">res</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> await</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> api</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">userApi</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">login</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">res</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">?.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">tokenName</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;&amp; </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">res</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">?.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">tokenValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    TOKEN_KEY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> res</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">tokenName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 设置 token</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    useCookie</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">TOKEN_KEY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">      maxAge</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">60</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 60</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 24</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 30</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">, </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 30 天</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }).</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> res</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">tokenValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>封装请求方法时，不设置 Credential，直接在 Header 中添加 <code>Authorization</code></li></ol><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">customFetch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $fetch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">create</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  onRequest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({ </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">options</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> TOKEN_KEY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> useUserStore</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">userAuth</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> useCookie</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">TOKEN_KEY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">userAuth</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">) {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      options</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">headers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">set</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Authorization</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">, </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Bearer </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">userAuth</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">value</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // options.headers.set(TOKEN_KEY, userAuth.value);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>如上操作之后，后端通过 Authorization Header 来鉴权，避免使用 Cookie；前端 Cookie 仅用于登录时手动种下，后续请求时通过 Header 携带，无需关系后端接口的 Set-Cookie 设置</li></ol><div class="hint-container note"><p class="hint-container-title">注</p><ol><li>接口返回的 <code>set-cookie</code> 也会种下一个 <code>cookie</code>，种下的 <code>cookie</code> 的 Domain 是 <code>api.example.com</code>，且不一定能种成功，因为可能是跨站</li><li>使用 <code>useCookie()</code> 存储的 <code>cookie</code> 的 Domain 是当前前端域名，这个基本上都能种成功</li></ol></div>`,30)]))}const p=s(h,[["render",l]]),d=JSON.parse('{"path":"/engineering/k3jt8fn6/","title":"Cookie","lang":"zh-CN","frontmatter":{"title":"Cookie","createTime":"2025/03/31 13:21:55","permalink":"/engineering/k3jt8fn6/"},"git":{"updatedTime":1743403480000,"contributors":[{"name":"evanqhu","username":"evanqhu","email":"qianghu98@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/evanqhu?v=4","url":"https://github.com/evanqhu"}]},"filePathRelative":"notes/engineering/03.其他/cookie.md","headers":[]}');export{p as comp,d as data};
