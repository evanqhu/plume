import{_ as t,c as a,a as n,o}from"./app-BRZjaKcj.js";const c={};function s(i,e){return o(),a("div",null,e[0]||(e[0]=[n('<div class="hint-container note"><p class="hint-container-title">注</p><p><a href="https://nuxt.com/docs/guide/concepts/auto-imports" target="_blank" rel="noopener noreferrer">https://nuxt.com/docs/guide/concepts/auto-imports</a></p></div><h2 id="自动导入" tabindex="-1"><a class="header-anchor" href="#自动导入"><span>自动导入</span></a></h2><p>Nuxt 3 提供了自动导入功能，可以让你在项目中使用各种 Nuxt 提供的 API 和组件，而无需手动导入。</p><ul><li>自动导入 <code>Vue.js</code> API，<code>Vue Router</code> API，<code>Pinia</code> API 等</li><li>自动导入 <code>/components</code> 目录下的组件 (支持子目录，名称组合)</li><li>自动导入 <code>/composables</code> 目录下的组合式函数 (仅扫描顶层文件，不支持子目录)</li><li>自动导入 <code>/utils</code> 目录下的工具函数 (仅扫描顶层文件，不支持子目录)</li><li>自动扫描 <code>/plugins</code> 目录下的插件并自动注册 (仅扫描顶层文件，不支持子目录)</li></ul><h2 id="渲染模式" tabindex="-1"><a class="header-anchor" href="#渲染模式"><span>渲染模式</span></a></h2><p>Nuxt 支持多种渲染模式，可以全 SSR 渲染，也可以全客户端渲染，也可以混合渲染，还可以生成静态站点文件。</p><h2 id="服务器引擎" tabindex="-1"><a class="header-anchor" href="#服务器引擎"><span>服务器引擎</span></a></h2><p>Nuxt 使用 Nitro 作为服务器引擎</p><h2 id="模块" tabindex="-1"><a class="header-anchor" href="#模块"><span>模块</span></a></h2><p>Nuxt 提供了一个模块系统，用于扩展框架核心功能并简化集成。</p>',10)]))}const d=t(c,[["render",s]]),p=JSON.parse('{"path":"/nuxt/rtq8fkxt/","title":"概念","lang":"zh-CN","frontmatter":{"title":"概念","createTime":"2025/01/14 10:54:01","permalink":"/nuxt/rtq8fkxt/"},"git":{"updatedTime":1740753621000,"contributors":[{"name":"evanqhu","username":"evanqhu","email":"qianghu98@163.com","commits":3,"avatar":"https://avatars.githubusercontent.com/evanqhu?v=4","url":"https://github.com/evanqhu"}]},"filePathRelative":"notes/nuxt/01.Guide/concepts.md","headers":[]}');export{d as comp,p as data};
